import psycopg2

Schema = """
CREATE TABLE IF NOT EXISTS system_monitor_events
(
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    url VARCHAR(1024) NOT NULL,
    status_code smallint NOT NULL,
    request_duration numeric NOT NULL,
    is_content_found boolean,
    created_at timestamp with time zone NOT NULL
);
"""


class PSQL:
    """
    MonitorEventRepository is a storage for monitor events.
    """

    def __init__(self, dsn: str = None, create_database: bool = True, **kwargs):
        """
        Creates a repository.

        :param dsn:
        :param create_database:
        :param kwargs:
        """

        self.connect = psycopg2.connect(dsn, **kwargs)
        self.connect.autocommit = True

        if create_database:
            cursor = self.connect.cursor()
            cursor.execute(Schema)

    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        self.close()

    def connection(self):
        """
        Return connection to database.
        :return: Connection.
        """
        return self.connect

    def close(self):
        """
        Close connection to database.
        :return:
        """
        self.connect.close()
